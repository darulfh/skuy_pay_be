// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/darulfh/skuy_pay_be/model"

	mock "github.com/stretchr/testify/mock"
)

// WifiRepository is an autogenerated mock type for the WifiRepository type
type WifiRepository struct {
	mock.Mock
}

// CreateWifiRepository provides a mock function with given fields: wifi
func (_m *WifiRepository) CreateWifiRepository(wifi *model.Wifi) (*model.Wifi, error) {
	ret := _m.Called(wifi)

	var r0 *model.Wifi
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Wifi) (*model.Wifi, error)); ok {
		return rf(wifi)
	}
	if rf, ok := ret.Get(0).(func(*model.Wifi) *model.Wifi); ok {
		r0 = rf(wifi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wifi)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Wifi) error); ok {
		r1 = rf(wifi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWifiByIDRepository provides a mock function with given fields: id
func (_m *WifiRepository) DeleteWifiByIDRepository(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllWifiRepository provides a mock function with given fields: page, limit
func (_m *WifiRepository) GetAllWifiRepository(page int, limit int) ([]*model.Wifi, error) {
	ret := _m.Called(page, limit)

	var r0 []*model.Wifi
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*model.Wifi, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*model.Wifi); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Wifi)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWifiByCodeRepository provides a mock function with given fields: code
func (_m *WifiRepository) GetWifiByCodeRepository(code string) (*model.Wifi, error) {
	ret := _m.Called(code)

	var r0 *model.Wifi
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Wifi, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Wifi); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wifi)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWifiByIDRepository provides a mock function with given fields: id
func (_m *WifiRepository) GetWifiByIDRepository(id string) (*model.Wifi, error) {
	ret := _m.Called(id)

	var r0 *model.Wifi
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Wifi, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Wifi); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wifi)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWifiByIDRepository provides a mock function with given fields: id, wifi
func (_m *WifiRepository) UpdateWifiByIDRepository(id string, wifi *model.Wifi) (*model.Wifi, error) {
	ret := _m.Called(id, wifi)

	var r0 *model.Wifi
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Wifi) (*model.Wifi, error)); ok {
		return rf(id, wifi)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Wifi) *model.Wifi); ok {
		r0 = rf(id, wifi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wifi)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.Wifi) error); ok {
		r1 = rf(id, wifi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWifiRepository creates a new instance of WifiRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWifiRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WifiRepository {
	mock := &WifiRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
