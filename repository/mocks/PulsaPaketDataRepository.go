// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/darulfh/skuy_pay_be/dto"
	model "github.com/darulfh/skuy_pay_be/model"

	mock "github.com/stretchr/testify/mock"
)

// PulsaPaketDataRepository is an autogenerated mock type for the PulsaPaketDataRepository type
type PulsaPaketDataRepository struct {
	mock.Mock
}

// CreatePulsaPaketData provides a mock function with given fields: data
func (_m *PulsaPaketDataRepository) CreatePulsaPaketData(data model.PulsaPaketData) (model.PulsaPaketData, error) {
	ret := _m.Called(data)

	var r0 model.PulsaPaketData
	var r1 error
	if rf, ok := ret.Get(0).(func(model.PulsaPaketData) (model.PulsaPaketData, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(model.PulsaPaketData) model.PulsaPaketData); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(model.PulsaPaketData)
	}

	if rf, ok := ret.Get(1).(func(model.PulsaPaketData) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePulsaById provides a mock function with given fields: id
func (_m *PulsaPaketDataRepository) DeletePulsaById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPulsaPaketData provides a mock function with given fields: data, isUser
func (_m *PulsaPaketDataRepository) GetAllPulsaPaketData(data dto.PulsaDto, isUser *bool) ([]model.PulsaPaketData, error) {
	ret := _m.Called(data, isUser)

	var r0 []model.PulsaPaketData
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.PulsaDto, *bool) ([]model.PulsaPaketData, error)); ok {
		return rf(data, isUser)
	}
	if rf, ok := ret.Get(0).(func(dto.PulsaDto, *bool) []model.PulsaPaketData); ok {
		r0 = rf(data, isUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PulsaPaketData)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.PulsaDto, *bool) error); ok {
		r1 = rf(data, isUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPulsaPaketDataById provides a mock function with given fields: id
func (_m *PulsaPaketDataRepository) GetPulsaPaketDataById(id string) (model.PulsaPaketData, error) {
	ret := _m.Called(id)

	var r0 model.PulsaPaketData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.PulsaPaketData, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.PulsaPaketData); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.PulsaPaketData)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePulsaById provides a mock function with given fields: id, data
func (_m *PulsaPaketDataRepository) UpdatePulsaById(id string, data model.PulsaPaketData) error {
	ret := _m.Called(id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.PulsaPaketData) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPulsaPaketDataRepository creates a new instance of PulsaPaketDataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPulsaPaketDataRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PulsaPaketDataRepository {
	mock := &PulsaPaketDataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
