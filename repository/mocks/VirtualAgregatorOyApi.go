// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/darulfh/skuy_pay_be/model"

	mock "github.com/stretchr/testify/mock"
)

// VirtualAgregatorOyApi is an autogenerated mock type for the VirtualAgregatorOyApi type
type VirtualAgregatorOyApi struct {
	mock.Mock
}

// GenerateVaApi provides a mock function with given fields: payload
func (_m *VirtualAgregatorOyApi) GenerateVaApi(payload model.GenerateVirtualAgregator) (*model.VaNumber, error) {
	ret := _m.Called(payload)

	var r0 *model.VaNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(model.GenerateVirtualAgregator) (*model.VaNumber, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(model.GenerateVirtualAgregator) *model.VaNumber); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.VaNumber)
		}
	}

	if rf, ok := ret.Get(1).(func(model.GenerateVirtualAgregator) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaIdStatusVaApi provides a mock function with given fields: virtualId
func (_m *VirtualAgregatorOyApi) GetVaIdStatusVaApi(virtualId string) (*model.VaNumber, error) {
	ret := _m.Called(virtualId)

	var r0 *model.VaNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.VaNumber, error)); ok {
		return rf(virtualId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.VaNumber); ok {
		r0 = rf(virtualId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.VaNumber)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(virtualId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVirtualAgregatorOyApi creates a new instance of VirtualAgregatorOyApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVirtualAgregatorOyApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *VirtualAgregatorOyApi {
	mock := &VirtualAgregatorOyApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
