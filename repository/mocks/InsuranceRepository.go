// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "BE-Golang/model"

	mock "github.com/stretchr/testify/mock"
)

// InsuranceRepository is an autogenerated mock type for the InsuranceRepository type
type InsuranceRepository struct {
	mock.Mock
}

// CreateInsuranceRepository provides a mock function with given fields: insurance
func (_m *InsuranceRepository) CreateInsuranceRepository(insurance *model.Insurance) (*model.Insurance, error) {
	ret := _m.Called(insurance)

	var r0 *model.Insurance
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Insurance) (*model.Insurance, error)); ok {
		return rf(insurance)
	}
	if rf, ok := ret.Get(0).(func(*model.Insurance) *model.Insurance); ok {
		r0 = rf(insurance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Insurance)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Insurance) error); ok {
		r1 = rf(insurance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInsuranceByIdRepository provides a mock function with given fields: insuranceId
func (_m *InsuranceRepository) DeleteInsuranceByIdRepository(insuranceId string) error {
	ret := _m.Called(insuranceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(insuranceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllInsuranceRepository provides a mock function with given fields: page, limit
func (_m *InsuranceRepository) GetAllInsuranceRepository(page int, limit int) ([]*model.Insurance, error) {
	ret := _m.Called(page, limit)

	var r0 []*model.Insurance
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*model.Insurance, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*model.Insurance); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Insurance)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInsuranceByPeriodRepository provides a mock function with given fields: customerID, period
func (_m *InsuranceRepository) GetInsuranceByPeriodRepository(customerID string, period string) (*model.Insurance, error) {
	ret := _m.Called(customerID, period)

	var r0 *model.Insurance
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Insurance, error)); ok {
		return rf(customerID, period)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Insurance); ok {
		r0 = rf(customerID, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Insurance)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(customerID, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInsuranceyIdRepository provides a mock function with given fields: insuranceId
func (_m *InsuranceRepository) GetInsuranceyIdRepository(insuranceId string) (*model.Insurance, error) {
	ret := _m.Called(insuranceId)

	var r0 *model.Insurance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Insurance, error)); ok {
		return rf(insuranceId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Insurance); ok {
		r0 = rf(insuranceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Insurance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(insuranceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInsuranceByIdRepository provides a mock function with given fields: insuranceId, insurance
func (_m *InsuranceRepository) UpdateInsuranceByIdRepository(insuranceId string, insurance *model.Insurance) (*model.Insurance, error) {
	ret := _m.Called(insuranceId, insurance)

	var r0 *model.Insurance
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Insurance) (*model.Insurance, error)); ok {
		return rf(insuranceId, insurance)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Insurance) *model.Insurance); ok {
		r0 = rf(insuranceId, insurance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Insurance)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.Insurance) error); ok {
		r1 = rf(insuranceId, insurance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInsuranceRepository creates a new instance of InsuranceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInsuranceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InsuranceRepository {
	mock := &InsuranceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
