// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/darulfh/skuy_pay_be/model"

	mock "github.com/stretchr/testify/mock"
)

// PdamRepository is an autogenerated mock type for the PdamRepository type
type PdamRepository struct {
	mock.Mock
}

// CreatePdamRepository provides a mock function with given fields: pdam
func (_m *PdamRepository) CreatePdamRepository(pdam *model.Pdam) (*model.Pdam, error) {
	ret := _m.Called(pdam)

	var r0 *model.Pdam
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Pdam) (*model.Pdam, error)); ok {
		return rf(pdam)
	}
	if rf, ok := ret.Get(0).(func(*model.Pdam) *model.Pdam); ok {
		r0 = rf(pdam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pdam)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Pdam) error); ok {
		r1 = rf(pdam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePdamByIdRepository provides a mock function with given fields: pdamId
func (_m *PdamRepository) DeletePdamByIdRepository(pdamId string) error {
	ret := _m.Called(pdamId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pdamId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPdamRepository provides a mock function with given fields: page, limit
func (_m *PdamRepository) GetAllPdamRepository(page int, limit int) ([]*model.Pdam, error) {
	ret := _m.Called(page, limit)

	var r0 []*model.Pdam
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*model.Pdam, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*model.Pdam); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Pdam)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPdamByIdRepository provides a mock function with given fields: pdamId
func (_m *PdamRepository) GetPdamByIdRepository(pdamId string) (*model.Pdam, error) {
	ret := _m.Called(pdamId)

	var r0 *model.Pdam
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Pdam, error)); ok {
		return rf(pdamId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Pdam); ok {
		r0 = rf(pdamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pdam)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pdamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPdamByPeriodRepository provides a mock function with given fields: customerID, period
func (_m *PdamRepository) GetPdamByPeriodRepository(customerID string, period string) (*model.Pdam, error) {
	ret := _m.Called(customerID, period)

	var r0 *model.Pdam
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Pdam, error)); ok {
		return rf(customerID, period)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Pdam); ok {
		r0 = rf(customerID, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pdam)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(customerID, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePdamByIdRepository provides a mock function with given fields: pdamId, pdam
func (_m *PdamRepository) UpdatePdamByIdRepository(pdamId string, pdam *model.Pdam) (*model.Pdam, error) {
	ret := _m.Called(pdamId, pdam)

	var r0 *model.Pdam
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Pdam) (*model.Pdam, error)); ok {
		return rf(pdamId, pdam)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Pdam) *model.Pdam); ok {
		r0 = rf(pdamId, pdam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pdam)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.Pdam) error); ok {
		r1 = rf(pdamId, pdam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPdamRepository creates a new instance of PdamRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPdamRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PdamRepository {
	mock := &PdamRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
