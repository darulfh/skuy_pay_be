// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/darulfh/skuy_pay_be/model"

	mock "github.com/stretchr/testify/mock"
)

// DiscountRepository is an autogenerated mock type for the DiscountRepository type
type DiscountRepository struct {
	mock.Mock
}

// CreateDiscountRepository provides a mock function with given fields: discount
func (_m *DiscountRepository) CreateDiscountRepository(discount *model.Discount) (*model.Discount, error) {
	ret := _m.Called(discount)

	var r0 *model.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Discount) (*model.Discount, error)); ok {
		return rf(discount)
	}
	if rf, ok := ret.Get(0).(func(*model.Discount) *model.Discount); ok {
		r0 = rf(discount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Discount) error); ok {
		r1 = rf(discount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiscountByIdRepository provides a mock function with given fields: discountId
func (_m *DiscountRepository) DeleteDiscountByIdRepository(discountId string) error {
	ret := _m.Called(discountId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(discountId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllDiscountRepository provides a mock function with given fields: page, limit
func (_m *DiscountRepository) GetAllDiscountRepository(page int, limit int) ([]*model.Discount, error) {
	ret := _m.Called(page, limit)

	var r0 []*model.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*model.Discount, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*model.Discount); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscountByCodeRepository provides a mock function with given fields: discountCode
func (_m *DiscountRepository) GetDiscountByCodeRepository(discountCode string) (*model.Discount, error) {
	ret := _m.Called(discountCode)

	var r0 *model.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Discount, error)); ok {
		return rf(discountCode)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Discount); ok {
		r0 = rf(discountCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(discountCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscountByIdRepository provides a mock function with given fields: discountId
func (_m *DiscountRepository) GetDiscountByIdRepository(discountId string) (*model.Discount, error) {
	ret := _m.Called(discountId)

	var r0 *model.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Discount, error)); ok {
		return rf(discountId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Discount); ok {
		r0 = rf(discountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(discountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDiscountByIdRepository provides a mock function with given fields: discountId, discount
func (_m *DiscountRepository) UpdateDiscountByIdRepository(discountId string, discount *model.Discount) (*model.Discount, error) {
	ret := _m.Called(discountId, discount)

	var r0 *model.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Discount) (*model.Discount, error)); ok {
		return rf(discountId, discount)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Discount) *model.Discount); ok {
		r0 = rf(discountId, discount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.Discount) error); ok {
		r1 = rf(discountId, discount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDiscountRepository creates a new instance of DiscountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiscountRepository {
	mock := &DiscountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
